from config import load_config
from aiogram.types import InlineKeyboardButton
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import uuid
from loader import bot
from yookassa import Payment, Configuration
from tgbot.db import DataBase

db = DataBase("database.db")

config = load_config()

Configuration.account_id = config.tg_bot.yookassa_shop_id  # shop id
Configuration.secret_key = config.tg_bot.yookassa_secret_key  # secret_key


################ –°–û–ó–î–ê–ï–ú –ü–ï–†–í–´–ô –ü–õ–ê–¢–ï–ñ ################
async def create_first_payment(user_id, amount, description):
    payment = Payment.create({
        "amount": {
            "value": amount,  # —Ü–µ–Ω–∞
            "currency": "RUB"  # –≤–∞–ª—é—Ç–∞
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/"  # –∫—É–¥–∞ –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç —é–∑–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        },
        "capture": True, # –Ω—É–∂–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        "description": f"{description}", # –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–ª–∞—Ç–µ–∂—É
        "save_payment_method": True, # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–ê–†–ê–ú–ï–¢–† –ê–í–¢–û–ü–õ–ê–¢–ï–ñ–ï–ô - —Å–æ—Ö—Ä–∞–Ω—è–π –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞
        "metadata": {
            "user_id": str(user_id)
        }
    }, uuid.uuid4())
    db.add_payment_id(user_id, payment.id) # –¥–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É –∫ —é–∑–µ—Ä—É –µ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–π–¥–∏

    kb = InlineKeyboardBuilder()
    kb.add(
        InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount}‚ÇΩ",
                             url=payment.confirmation.confirmation_url),
        InlineKeyboardButton(
            text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment:{payment.id}")
    )
    await bot.send_message(user_id, "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)':", reply_markup=kb.as_markup()) # –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã/–ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã


################ –ü–†–û–í–ï–†–Ø–ï–ú –£–°–ü–ï–®–ï–ù –õ–ò –ü–õ–ê–¢–ï–ñ ################
async def check_payment(user_id): # —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è
    payment_id = db.get_payment_id(user_id) # –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –≤ –±–∞–∑–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–π–¥–∏
    payment = Payment.find_one(str(payment_id)) # –∑–∞–ø—Ä–∞—à–∏–≤–∞—é —É —é–∫–∞—Å—Å—ã –ø–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–º—É –∞–π–¥–∏, –ø—Ä–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞

    if payment.status == "succeeded": # –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞
        if payment.payment_method.saved: # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            payment_method_id = payment.payment_method.id # —Å–æ—Ö—Ä–∞–Ω—è–µ–º payment_method.id - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–∞–º –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
            db.add_payment_method_id(user_id, payment_method_id, 1) # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –±–∞–∑—É payment_method.id
            await bot.send_message(user_id,
                                   f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                   f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment.id}\n"
                                   f"–°—É–º–º–∞: {payment.amount.value} {payment.amount.currency}"
                                   ) # –≥–æ–≤–æ—Ä–∏–º —é–∑–µ—Ä—É —á—Ç–æ –≤—Å–µ –∫—Ä—É—Ç–æ
            return True, payment.amount.value # —ç—Ç–æ –±—ã–ª–æ –Ω—É–∂–Ω–æ –º–Ω–µ –≤ –∫–æ–¥–µ, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å

    else: # –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
        await bot.send_message(user_id, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.") # –≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        return False, None

        # await asyncio.sleep(20)


################ –ê–í–¢–û–ü–õ–ê–¢–ï–ñ ################
async def create_recurring_payment(user_id, amount, description):
    payment_method_id = db.get_payment_method_id(user_id) # –±–µ—Ä–µ–º –∏–∑ –±–∞–∑—ã —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π

    if not payment_method_id: # –µ—Å–ª–∏ —Å–ø–æ—Å–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–µ—Ç - —Å—Ç–æ–ø–∞–µ–º. –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫
        return False

    recurring_payment = Payment.create({
        "amount": {
            "value": amount, # —Ü–µ–Ω–∞
            "currency": "RUB" # –≤–∞–ª—é—Ç–∞
        },
        "payment_method_id": payment_method_id, # —Ç—É—Ç –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
        "capture": True, # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏–µ
        "description": f"{description}", # –æ–ø–∏—Å–∞–Ω–∏–µ
    }, uuid.uuid4())

    if recurring_payment.status == "succeeded": # —Å—Ä–∞–∑—É –∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–∞ –ª–∏ –∞–≤—Ç–æ–æ–ø–ª–∞—Ç–∞. –ï—Å–ª–∏ –¥–∞ - –≥–æ–≤–æ—Ä–∏–º —é–∑–µ—Ä—É
        await bot.send_message(user_id,
                               f"üîÅ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n"
                               f"ID: <code>{recurring_payment.id}</code>\n"
                               f"–°—É–º–º–∞: {recurring_payment.amount.value} {recurring_payment.amount.currency}"
                               )
        return True
    else:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞.") # –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, —Ç–∞–∫–∂–µ –æ–ø–æ–≤–µ—â–∞–µ–º —é–∑–µ—Ä–∞
        return False
